// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Patient {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  dob          DateTime?   // Date of Birth (optional for existing patients)
  intakeDate   DateTime
  srsScores    SRSScore[]
  portalAccount PatientPortal?
  recoveryPoints RecoveryPoint[]
  srsBuffers   SRSBuffer?
  messages     Message[]   // Messages to this patient
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
}

model SRSScore {
  id                  Int      @id @default(autoincrement())
  patientId           Int
  date                DateTime
  formType            String   // "Intake" or "Follow-Up"
  region              String
  
  // Disability Index data
  ndi                 Json?    // Neck Disability Index
  tdi                 Json?    // Thoracic Disability Index (new)
  odi                 Json?    // Oswestry Disability Index
  ulfi                Json?    // Upper Limb Functional Index
  lefs                Json?    // Lower Extremity Functional Scale
  disabilityPercentage Float?
  
  // Pain and Function
  vas                 Int      // Visual Analog Scale (0-10)
  psfs                Json     // Patient-Specific Functional Scale
  
  // Cognitive Assessment
  beliefs             Json?    // Limiting beliefs (changed to optional JSON)
  confidence          Int      // Confidence level (0-10)
  
  // Follow-up specific
  groc                Int?     // Global Rating of Change
  
  // Calculated values
  srsScore            Int      // Signature Recovery Score (0-11)
  beliefStatus        String?  // Status of limiting beliefs
  
  // Clinical verification flags
  recoveryMilestone   Boolean? @default(false)
  clinicalProgressVerified Boolean? @default(false)
  clinicianAssessed   Boolean? @default(false)
  grocCaptured        Boolean? @default(false)
  
  patient             Patient  @relation(fields: [patientId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
}

model PatientPortal {
  id        Int      @id @default(autoincrement())
  patientId Int      @unique
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

// Recovery Points System
model RecoveryPoint {
  id        Int      @id @default(autoincrement())
  patientId Int
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  date      DateTime @default(now())
  category  RPType
  action    String   // Description of the action taken
  points    Int      // Points earned for this action
  
  @@index([patientId, category, date])
}

enum RPType {
  MOVEMENT
  LIFESTYLE  
  MINDSET
  EDUCATION
  ADHERENCE
}

// SRS Buffer - stores partial credit accumulation
model SRSBuffer {
  id           Int     @id @default(autoincrement())
  patientId    Int     @unique
  patient      Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Buffer values (0.0 to domain max)
  psfsBuffer   Float   @default(0.0)    // Max 2.0 points
  vasBuffer    Float   @default(0.0)    // Max 1.0 points  
  confBuffer   Float   @default(0.0)    // Max 2.0 points
  beliefBuffer Float   @default(0.0)    // Max 1.0 points
  
  // RP counters (reset when buffer increments)
  movementRP   Int     @default(0)      // MOVEMENT category
  lifestyleRP  Int     @default(0)      // LIFESTYLE category
  mindsetRP    Int     @default(0)      // MINDSET category
  educationRP  Int     @default(0)      // EDUCATION category
  
  updatedAt    DateTime @updatedAt
}

// Threshold tracking for clinician alerts
model RPThresholdHit {
  id        Int       @id @default(autoincrement())
  patientId Int
  domain    SRSDomain // Which SRS domain threshold was hit
  windowEnd DateTime  // 4-week window end date
  met       Boolean   // Whether threshold was met
  rpTotal   Int       // Total RP earned in the window
  
  createdAt DateTime  @default(now())
  
  @@unique([patientId, domain, windowEnd])
  @@index([patientId, domain, windowEnd])
}

enum SRSDomain {
  PSFS
  VAS  
  CONFIDENCE
  BELIEFS
}

// Messages between clinicians and patients
model Message {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Message content
  subject     String
  content     String
  senderType  SenderType // CLINICIAN or PATIENT
  senderName  String     // Name of the sender
  senderEmail String?    // Email of the sender (optional)
  
  // Message status
  isRead      Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([patientId, createdAt])
}

enum SenderType {
  CLINICIAN
  PATIENT
}