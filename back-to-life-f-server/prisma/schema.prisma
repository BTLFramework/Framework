generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Patient {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  dob               DateTime?
  intakeDate        DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  assessmentResults AssessmentResult[]
  messages          Message[]
  mindfulnessLogs   MindfulnessLog[]
  portalAccount     PatientPortal?
  recoveryPoints    RecoveryPoint[]
  srsBuffers        SRSBuffer?
  srsDaily          SRSDaily[]
  srsScores         SRSScore[]
  practitionerAssessments PractitionerAssessment[]
  taskCompletions   TaskCompletion[]
}

model SRSDaily {
  id        String   @id @default(uuid())
  patientId Int
  date      DateTime @default(now())
  pain      Float
  function  Float
  psychLoad Float
  fa        Float?
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, date])
  @@index([patientId, date])
  @@index([date])
}

model AssessmentResult {
  id        String   @id @default(uuid())
  patientId Int
  name      String
  score     Int
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([patientId, name, createdAt])
}

model SRSScore {
  id                       Int      @id @default(autoincrement())
  patientId                Int
  date                     DateTime
  formType                 String
  region                   String
  ndi                      Json?
  tdi                      Json?
  odi                      Json?
  ulfi                     Json?
  lefs                     Json?
  disabilityPercentage     Float?
  vas                      Int
  psfs                     Json
  pcs4                     Json?
  tsk7                     Json?
  beliefs                  Json?
  confidence               Int
  groc                     Int?
  srsScore                 Int
  beliefStatus             String?
  recoveryMilestone        Boolean? @default(false)
  clinicalProgressVerified Boolean? @default(false)
  clinicianAssessed        Boolean? @default(false)
  grocCaptured             Boolean? @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
  patient                  Patient  @relation(fields: [patientId], references: [id])
}

model PractitionerAssessment {
  id        Int      @id @default(autoincrement())
  patientId Int
  date      DateTime @default(now())
  
  // Section 1: Symptom & Key Finding Resolution
  neurologicalSelected     Boolean  @default(false)
  neurologicalScore        Float    @default(0)
  neurologicalNotes        String?
  
  mechanicalSelected       Boolean  @default(false)
  mechanicalScore          Float    @default(0)
  mechanicalNotes          String?
  
  orthopedicSelected       Boolean  @default(false)
  orthopedicScore          Float    @default(0)
  orthopedicNotes          String?
  
  provocativeSelected      Boolean  @default(false)
  provocativeScore         Float    @default(0)
  provocativeNotes         String?
  
  // Section 2: Functional & Mechanical Progress
  romSelected              Boolean  @default(false)
  romScore                 Float    @default(0)
  romNotes                 String?
  
  functionalSelected       Boolean  @default(false)
  functionalScore          Float    @default(0)
  functionalNotes          String?
  
  movementSelected         Boolean  @default(false)
  movementScore            Float    @default(0)
  movementNotes            String?
  
  strengthSelected         Boolean  @default(false)
  strengthScore            Float    @default(0)
  strengthNotes            String?
  
  balanceSelected          Boolean  @default(false)
  balanceScore             Float    @default(0)
  balanceNotes             String?
  
  stabilitySelected        Boolean  @default(false)
  stabilityScore           Float    @default(0)
  stabilityNotes           String?
  
  treatmentSelected        Boolean  @default(false)
  treatmentScore           Float    @default(0)
  treatmentNotes           String?
  
  // Calculated scores
  section1Score            Float    @default(0)
  section2Score            Float    @default(0)
  totalPractitionerScore   Float    @default(0)
  
  // Metadata
  clinicianId              String?  // ID of the clinician who performed assessment
  clinicianName            String?  // Name of the clinician
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  patient                  Patient  @relation(fields: [patientId], references: [id])
  
  @@index([patientId, date])
  @@index([clinicianId])
}

model PatientPortal {
  id        Int      @id @default(autoincrement())
  patientId Int      @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model RecoveryPoint {
  id        Int      @id @default(autoincrement())
  patientId Int
  date      DateTime @default(now())
  category  RPType
  action    String
  points    Int
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, category, date])
}

model SRSBuffer {
  id           Int      @id @default(autoincrement())
  patientId    Int      @unique
  psfsBuffer   Float    @default(0.0)
  vasBuffer    Float    @default(0.0)
  confBuffer   Float    @default(0.0)
  beliefBuffer Float    @default(0.0)
  movementRP   Int      @default(0)
  lifestyleRP  Int      @default(0)
  mindsetRP    Int      @default(0)
  educationRP  Int      @default(0)
  updatedAt    DateTime @updatedAt
  patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model RPThresholdHit {
  id        Int       @id @default(autoincrement())
  patientId Int
  domain    SRSDomain
  windowEnd DateTime
  met       Boolean
  rpTotal   Int
  createdAt DateTime  @default(now())

  @@unique([patientId, domain, windowEnd])
  @@index([patientId, domain, windowEnd])
}

model Message {
  id          Int        @id @default(autoincrement())
  patientId   Int
  subject     String
  content     String
  senderType  SenderType
  senderName  String
  senderEmail String?
  isRead      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  patient     Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, createdAt])
}

model MindfulnessLog {
  id        Int      @id @default(autoincrement())
  patientId Int
  date      DateTime @default(now())
  practice  String
  mood      String?
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, date])
  @@index([patientId, date])
}

model TaskCompletion {
  id              Int      @id @default(autoincrement())
  patientId       Int
  taskType        TaskType
  completedAt     DateTime @default(now())
  sessionDuration Int?
  pointsEarned    Int?
  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, taskType, completedAt])
  @@index([completedAt])
}

enum RPType {
  MOVEMENT
  LIFESTYLE
  MINDSET
  EDUCATION
  ADHERENCE
}

enum SRSDomain {
  PSFS
  VAS
  CONFIDENCE
  BELIEFS
}

enum SenderType {
  CLINICIAN
  PATIENT
}

enum TaskType {
  MOVEMENT
  PAIN_ASSESSMENT
  MINDFULNESS
  RECOVERY_INSIGHTS
}
